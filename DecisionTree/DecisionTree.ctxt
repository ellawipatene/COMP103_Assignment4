#BlueJ class context
comment0.target=DecisionTree
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ Setup\ the\ GUI\ and\ make\ a\ sample\ tree\n
comment10.params=
comment10.target=void\ drawTree()
comment10.text=\n\ Calls\ method\ to\ draw\ tree\n
comment11.params=node\ x\ y
comment11.target=void\ test(DTNode,\ float,\ float)
comment11.text=\n\ A\ recursive\ method\ that\ draws\ out\ the\ tree\n
comment12.params=num
comment12.target=boolean\ isOdd(int)
comment12.text=\n\ Returns\ true\ if\ number\ is\ odd\n
comment13.params=
comment13.target=void\ addAnswers()
comment13.text=\n\ Challenge\ 2\:\n\ Add\ more\ answers\ to\ questions\n
comment14.params=node\ answer
comment14.target=void\ printTreeChallenge(DTNode,\ java.lang.String)
comment14.text=\n\ Prints\ the\ tree\ if\ it\ has\ multiple\ answers\n\ Recursive\ method\n
comment15.params=
comment15.target=void\ printMap()
comment16.params=root
comment16.target=void\ breathFirst(DTNode)
comment16.text=\ \n\ Didn't\ end\ up\ using\ this\ method\n
comment17.params=leaf\ indent
comment17.target=void\ indent(DTNode,\ java.lang.String)
comment18.params=filename
comment18.target=void\ loadTree(java.lang.String)
comment18.text=\ \n\ Loads\ a\ decision\ tree\ from\ a\ file.\n\ Each\ line\ starts\ with\ either\ "Question\:"\ or\ "Answer\:"\ and\ is\ followed\ by\ the\ text\n\ Calls\ a\ recursive\ method\ to\ load\ the\ tree\ and\ return\ the\ root\ node,\n\ \ and\ assigns\ this\ node\ to\ theTree.\n
comment19.params=lines
comment19.target=DTNode\ loadSubTree(java.util.Queue)
comment19.text=\n\ Loads\ a\ tree\ (or\ subtree)\ from\ a\ Scanner\ and\ returns\ the\ root.\n\ The\ first\ line\ has\ the\ text\ for\ the\ root\ node\ of\ the\ tree\ (or\ subtree)\n\ It\ should\ make\ the\ node,\ and\ \n\ \ \ if\ the\ first\ line\ starts\ with\ "Question\:",\ it\ loads\ two\ subtrees\ (yes,\ and\ no)\n\ \ \ \ from\ the\ scanner\ and\ add\ them\ as\ the\ \ children\ of\ the\ node,\n\ Finally,\ it\ should\ return\ the\ \ node.\n
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\n\ Set\ up\ the\ interface\n
comment3.params=
comment3.target=void\ printTree()
comment3.text=\ \ \n\ Print\ out\ the\ contents\ of\ the\ decision\ tree\ in\ the\ text\ pane.\n\ The\ root\ node\ should\ be\ at\ the\ top,\ followed\ by\ its\ "yes"\ subtree,\n\ and\ then\ its\ "no"\ subtree.\n\ Needs\ a\ recursive\ "helper\ method"\ which\ is\ passed\ a\ node.\n\ \n\ COMPLETION\:\n\ Each\ node\ should\ be\ indented\ by\ how\ deep\ it\ is\ in\ the\ tree.\n\ The\ recursive\ "helper\ method"\ is\ passed\ a\ node\ and\ an\ indentation\ string.\n\ \ (The\ indentation\ string\ will\ be\ a\ string\ of\ space\ characters)\n
comment4.params=leaf\ binary
comment4.target=void\ preOrder(DTNode,\ java.lang.String)
comment4.text=\n\ Prints\ out\ elements\ of\ the\ tree\ recursivley\n
comment5.params=leaf\ binary\ indent
comment5.target=void\ preOrderCompl(DTNode,\ java.lang.String,\ java.lang.String)
comment5.text=\n\ Pre\ order\ but\ is\ printed\ nice\ with\ indents\n
comment6.params=
comment6.target=void\ runTree()
comment6.text=\n\ Run\ the\ tree\ by\ starting\ at\ the\ top\ (of\ theTree),\ and\ working\n\ down\ the\ tree\ until\ it\ gets\ to\ a\ leaf\ node\ (a\ node\ with\ no\ children)\n\ If\ the\ node\ is\ a\ leaf\ it\ prints\ the\ answer\ in\ the\ node\n\ If\ the\ node\ is\ not\ a\ leaf\ node,\ then\ it\ asks\ the\ question\ in\ the\ node,\n\ and\ depending\ on\ the\ answer,\ goes\ to\ the\ "yes"\ child\ or\ the\ "no"\ child.\n
comment7.params=
comment7.target=void\ growTree()
comment7.text=\n\ Grow\ the\ tree\ by\ allowing\ the\ user\ to\ extend\ the\ tree.\n\ Like\ runTree,\ it\ starts\ at\ the\ top\ (of\ theTree),\ and\ works\ its\ way\ down\ the\ tree\n\ \ until\ it\ finally\ gets\ to\ a\ leaf\ node.\ \n\ If\ the\ current\ node\ has\ a\ question,\ then\ it\ asks\ the\ question\ in\ the\ node,\n\ and\ depending\ on\ the\ answer,\ goes\ to\ the\ "yes"\ child\ or\ the\ "no"\ child.\n\ If\ the\ current\ node\ is\ a\ leaf\ it\ prints\ the\ decision,\ and\ asks\ if\ it\ is\ right.\n\ If\ it\ was\ wrong,\ it\n\ \ -\ asks\ the\ user\ what\ the\ decision\ should\ have\ been,\n\ \ -\ asks\ for\ a\ question\ to\ distinguish\ the\ right\ decision\ from\ the\ wrong\ one\n\ \ -\ changes\ the\ text\ in\ the\ node\ to\ be\ the\ question\n\ \ -\ adds\ two\ new\ children\ (leaf\ nodes)\ to\ the\ node\ with\ the\ two\ decisions.\n
comment8.params=
comment8.target=void\ saveTree()
comment8.text=\n\ Method\ to\ save\ the\ tree\ to\ a\ file.\ \n
comment9.params=outfile\ leaf
comment9.target=void\ saveNode(java.io.PrintStream,\ DTNode)
comment9.text=\n\ A\ recursive\ method\ that\ traverses\ the\ tree\n\ Printing\ to\ the\ outfile\ if\ it\ is\ a\ question\ or\ answer.\n\ For\ saving\ the\ tree\ to\ a\ file.\ \n
numComments=20
